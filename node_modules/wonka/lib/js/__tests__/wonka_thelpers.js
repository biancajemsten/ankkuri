'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var ZenObservable = require("zen-observable");

function testWithListenable(operator) {
  var sink = /* record */[/* contents */(function (param) {
        return /* () */0;
      })];
  var signals = /* array */[];
  var source = function (x) {
    sink[0] = x;
    return x(/* Start */Block.__(0, [(function (signal) {
                      signals.push(signal);
                      return /* () */0;
                    })]));
  };
  var talkback = /* record */[/* contents */(function (param) {
        return /* () */0;
      })];
  var res = /* array */[];
  Curry._2(operator, source, (function (signal) {
          if (typeof signal === "number" || signal.tag) {
            res.push(signal);
            return /* () */0;
          } else {
            talkback[0] = signal[0];
            return /* () */0;
          }
        }));
  return new Promise((function (resolve, param) {
                sink[0](/* Push */Block.__(1, [1]));
                setTimeout((function (param) {
                        sink[0](/* Push */Block.__(1, [2]));
                        setTimeout((function (param) {
                                sink[0](/* End */0);
                                setTimeout((function (param) {
                                        return resolve(/* tuple */[
                                                    signals,
                                                    res
                                                  ]);
                                      }), 0);
                                return /* () */0;
                              }), 0);
                        return /* () */0;
                      }), 0);
                return /* () */0;
              }));
}

function testTalkbackEnd(operator) {
  var sink = /* record */[/* contents */(function (param) {
        return /* () */0;
      })];
  var signals = /* array */[];
  var source = function (x) {
    x(/* Start */Block.__(0, [(function (signal) {
                signals.push(signal);
                return /* () */0;
              })]));
    sink[0] = x;
    return /* () */0;
  };
  var talkback = /* record */[/* contents */(function (param) {
        return /* () */0;
      })];
  var res = /* array */[];
  Curry._2(operator, source, (function (signal) {
          if (typeof signal === "number" || signal.tag) {
            res.push(signal);
            return /* () */0;
          } else {
            talkback[0] = signal[0];
            return /* () */0;
          }
        }));
  return new Promise((function (resolve, param) {
                sink[0](/* Push */Block.__(1, [1]));
                setTimeout((function (param) {
                        talkback[0](/* Close */1);
                        setTimeout((function (param) {
                                return resolve(/* tuple */[
                                            signals,
                                            res
                                          ]);
                              }), 0);
                        return /* () */0;
                      }), 0);
                return /* () */0;
              }));
}

function testSource(source) {
  var talkback = /* record */[/* contents */(function (param) {
        return /* () */0;
      })];
  var res = /* array */[];
  return new Promise((function (resolve, param) {
                return Curry._1(source, (function (signal) {
                              if (typeof signal === "number") {
                                res.push(signal);
                                return resolve(res);
                              } else if (signal.tag) {
                                res.push(signal);
                                return talkback[0](/* Pull */0);
                              } else {
                                talkback[0] = signal[0];
                                return talkback[0](/* Pull */0);
                              }
                            }));
              }));
}

function testSourceOperator(source) {
  var res = /* array */[];
  var innerSource = function (sink) {
    return Curry._1(source, (function (signal) {
                  if (typeof signal === "number" || signal.tag) {
                    return sink(signal);
                  } else {
                    var outerTalkback = signal[0];
                    return sink(/* Start */Block.__(0, [(function (talkback) {
                                      res.push(talkback);
                                      return outerTalkback(talkback);
                                    })]));
                  }
                }));
  };
  return /* tuple */[
          res,
          innerSource
        ];
}

function observableFromArray(arr) {
  return ZenObservable.from(arr);
}

function observableFrom(obs) {
  return ZenObservable.from(obs);
}

exports.testWithListenable = testWithListenable;
exports.testTalkbackEnd = testTalkbackEnd;
exports.testSource = testSource;
exports.testSourceOperator = testSourceOperator;
exports.observableFromArray = observableFromArray;
exports.observableFrom = observableFrom;
/* zen-observable Not a pure module */
