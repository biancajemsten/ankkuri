

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Wonka_helpers from "../wonka_helpers.js";

function buffer(notifier) {
  return (function (source) {
      return (function (sink) {
          var state = /* record */[
            /* buffer */new Array(),
            /* sourceTalkback */Wonka_helpers.talkbackPlaceholder,
            /* notifierTalkback */Wonka_helpers.talkbackPlaceholder,
            /* ended */false
          ];
          Curry._1(source, (function (signal) {
                  if (typeof signal === "number") {
                    if (state[/* ended */3]) {
                      return /* () */0;
                    } else {
                      state[/* ended */3] = true;
                      state[/* notifierTalkback */2](/* Close */1);
                      sink(/* Push */Block.__(1, [state[/* buffer */0]]));
                      return sink(/* End */0);
                    }
                  } else if (signal.tag) {
                    if (state[/* ended */3]) {
                      return /* () */0;
                    } else {
                      state[/* buffer */0].push(signal[0]);
                      return state[/* sourceTalkback */1](/* Pull */0);
                    }
                  } else {
                    state[/* sourceTalkback */1] = signal[0];
                    return Curry._1(notifier, (function (signal) {
                                  if (typeof signal === "number") {
                                    if (state[/* ended */3]) {
                                      return /* () */0;
                                    } else {
                                      state[/* ended */3] = true;
                                      state[/* sourceTalkback */1](/* Close */1);
                                      sink(/* Push */Block.__(1, [state[/* buffer */0]]));
                                      return sink(/* End */0);
                                    }
                                  } else if (signal.tag) {
                                    if (state[/* ended */3]) {
                                      return /* () */0;
                                    } else {
                                      sink(/* Push */Block.__(1, [state[/* buffer */0]]));
                                      state[/* buffer */0] = new Array();
                                      return state[/* notifierTalkback */2](/* Pull */0);
                                    }
                                  } else {
                                    state[/* notifierTalkback */2] = signal[0];
                                    return state[/* notifierTalkback */2](/* Pull */0);
                                  }
                                }));
                  }
                }));
          return sink(/* Start */Block.__(0, [(function (signal) {
                            if (state[/* ended */3]) {
                              return 0;
                            } else if (signal) {
                              state[/* ended */3] = true;
                              state[/* sourceTalkback */1](/* Close */1);
                              return state[/* notifierTalkback */2](/* Close */1);
                            } else {
                              return state[/* sourceTalkback */1](/* Pull */0);
                            }
                          })]));
        });
    });
}

export {
  buffer ,
  
}
/* No side effect */
