

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Wonka_helpers from "../wonka_helpers.js";

var observableSymbol = (
  typeof Symbol === 'function'
    ? Symbol.observable || (Symbol.observable = Symbol('observable'))
    : '@@observable'
);

function fromObservable(input) {
  var match = input[observableSymbol];
  var observable = match !== undefined ? input[observableSymbol]() : input;
  return (function (sink) {
      var observer = {
        next: (function (value) {
            return sink(/* Push */Block.__(1, [value]));
          }),
        complete: (function () {
            return sink(/* End */0);
          }),
        error: (function (param) {
            return /* () */0;
          })
      };
      var subscription = observable.subscribe(observer);
      return sink(/* Start */Block.__(0, [(function (signal) {
                        if (signal) {
                          return subscription.unsubscribe();
                        } else {
                          return /* () */0;
                        }
                      })]));
    });
}

function toObservable(source) {
  var observable = {
    subscribe: (function (observer) {
        var state = /* record */[
          /* talkback */Wonka_helpers.talkbackPlaceholder,
          /* ended */false
        ];
        Curry._1(source, (function (signal) {
                if (typeof signal === "number") {
                  state[/* ended */1] = true;
                  return observer.complete();
                } else if (signal.tag) {
                  if (state[/* ended */1]) {
                    return /* () */0;
                  } else {
                    observer.next(signal[0]);
                    return state[/* talkback */0](/* Pull */0);
                  }
                } else {
                  var x = signal[0];
                  state[/* talkback */0] = x;
                  return x(/* Pull */0);
                }
              }));
        return {
                unsubscribe: (function () {
                    if (state[/* ended */1]) {
                      return 0;
                    } else {
                      state[/* ended */1] = true;
                      return state[/* talkback */0](/* Close */1);
                    }
                  })
              };
      })
  };
  observable[observableSymbol] = (function (param) {
      return observable;
    });
  return observable;
}

export {
  fromObservable ,
  toObservable ,
  
}
/* observableSymbol Not a pure module */
