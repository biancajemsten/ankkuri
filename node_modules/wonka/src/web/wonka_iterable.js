

import * as Block from "bs-platform/lib/es6/block.js";

var iteratorSymbol = (
  typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'
);

function fromIterable(input) {
  var match = input[iteratorSymbol];
  var iterable = match !== undefined ? input[iteratorSymbol]() : input;
  return (function (sink) {
      var state = /* record */[
        /* ended */false,
        /* looping */false,
        /* pull */false
      ];
      return sink(/* Start */Block.__(0, [(function (signal) {
                        var match = state[/* looping */1];
                        if (signal) {
                          state[/* ended */0] = true;
                          return /* () */0;
                        } else if (match) {
                          state[/* pull */2] = true;
                          return /* () */0;
                        } else {
                          state[/* pull */2] = true;
                          state[/* looping */1] = true;
                          while(state[/* pull */2] && !state[/* ended */0]) {
                            var next = iterable.next();
                            if (next.done) {
                              state[/* ended */0] = true;
                              sink(/* End */0);
                            } else {
                              var x = next.value;
                              state[/* pull */2] = false;
                              sink(/* Push */Block.__(1, [x]));
                            }
                          };
                          state[/* looping */1] = false;
                          return /* () */0;
                        }
                      })]));
    });
}

export {
  iteratorSymbol ,
  fromIterable ,
  
}
/* iteratorSymbol Not a pure module */
