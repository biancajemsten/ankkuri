function _templateObject7() {
  var data = _taggedTemplateLiteral(["\n    border: 0;\n    width: 300px;\n    padding: 1em;\n    margin-bottom: 1em;\n  "]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteral(["\n  height: 2em;\n"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["\n  height: calc(50% - 1em);\n  width: 100%;\n  overflow: hidden;\n"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["\n  align-items: flex-start;\n  text-align: start;\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 50%;\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n  padding: 2em 4em;\n  display: flex;\n  flex-direction: column;\n  width: 50%;\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  height: 100vh;\n  width: 100vw;\n  position: absolute;\n  top: 0;\n  left: 0;\n  display: flex;\n  flex-direction: row;\n  background-color: black;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React from 'react';
import PropTypes from 'prop-types';
import { DeckContext } from '../../hooks/use-deck';
import styled, { css } from 'styled-components';
import { compose, color, typography } from 'styled-system';
import { Heading, Text } from '../typography';
import * as queryString from 'query-string';
var PresenterDeckContainer = styled('div')(_templateObject());
var NotesColumn = styled('div')(_templateObject2());
var PreviewColumn = styled('div')(_templateObject3());
var PresentationHeader = styled(Heading)(_templateObject4());
var SlideContainer = styled('div')(_templateObject5());
var SlideDivider = styled('div')(_templateObject6());
var Button = styled('button')(compose(color, typography), css(_templateObject7()));
Button.defaultProps = {
  backgroundColor: 'secondary',
  color: 'primary',
  fontSize: 'text'
};

var PresenterDeck = function PresenterDeck(props) {
  var _React$useContext = React.useContext(DeckContext),
      _React$useContext$sta = _React$useContext.state,
      currentNotes = _React$useContext$sta.currentNotes,
      currentSlide = _React$useContext$sta.currentSlide,
      currentSlideElement = _React$useContext$sta.currentSlideElement,
      immediate = _React$useContext$sta.immediate;

  var isController = props.isController,
      isReceiver = props.isReceiver,
      startConnection = props.startConnection,
      terminateConnection = props.terminateConnection,
      children = props.children;
  var onStartConnection = React.useCallback(function () {
    var urlParams = queryString.stringify({
      slide: currentSlide,
      slideElement: currentSlideElement,
      immediate: immediate || undefined
    });
    startConnection(urlParams);
  }, [currentSlide, currentSlideElement, immediate, startConnection]);
  var activeSlide = children.length > currentSlide ? children[currentSlide] : null;
  var nextSlide = children.length > currentSlide + 1 ? children[currentSlide + 1] : null;
  return React.createElement(PresenterDeckContainer, null, React.createElement(NotesColumn, null, !isController && !isReceiver && React.createElement(Button, {
    onClick: onStartConnection
  }, "Start Connection"), isController && !isReceiver && React.createElement(Button, {
    onClick: terminateConnection
  }, "Terminate Connection"), React.createElement(PresentationHeader, {
    fontSize: "subHeader"
  }, "Notes:"), React.createElement(Text, {
    lineHeight: "180%",
    fontSize: "18px"
  }, currentNotes)), React.createElement(PreviewColumn, null, React.createElement(SlideContainer, null, activeSlide), React.createElement(SlideDivider, null), React.createElement(SlideContainer, null, nextSlide)));
};

PresenterDeck.propTypes = {
  children: PropTypes.node.isRequired,
  isController: PropTypes.bool.isRequired,
  isReceiver: PropTypes.bool.isRequired,
  startConnection: PropTypes.func.isRequired,
  terminateConnection: PropTypes.func.isRequired
};
export default PresenterDeck;