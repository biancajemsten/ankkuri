function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from 'react';
import propTypes from 'prop-types';
import marksy from 'marksy';
import mdxComponentMap from '../utils/mdx-component-mapper';
import indentNormalizer from '../utils/indent-normalizer';
import { CodePane } from '../index';

var _CodePane = function _CodePane(_ref) {
  var language = _ref.language,
      code = _ref.code;
  return React.createElement(CodePane, {
    autoFillHeight: true,
    language: language
  }, code);
};

_CodePane.propTypes = {
  code: propTypes.string.isRequired,
  language: propTypes.string.isRequired
};
var compile = marksy({
  createElement: React.createElement,
  elements: _objectSpread({}, mdxComponentMap, {
    codeblock: _CodePane,
    code: _CodePane
  })
});

var Markdown = function Markdown(props) {
  return React.createElement(React.Fragment, null, compile(indentNormalizer(props.children)).tree);
};

Markdown.propTypes = {
  children: propTypes.string.isRequired,
  containsSlides: propTypes.bool
};
export default Markdown;