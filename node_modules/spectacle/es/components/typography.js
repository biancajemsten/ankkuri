function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  border-left: 1px solid\n    ", ";\n\n  div {\n    margin: 0;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import styled from 'styled-components';
import { color, typography, space, compose } from 'styled-system';
var Text = styled('div')(compose(color, typography, space));
Text.defaultProps = {
  color: 'primary',
  fontFamily: 'text',
  fontSize: 'text',
  textAlign: 'left',
  padding: 0,
  margin: 'textMargin'
};
var CodeSpan = styled('code')(compose(color, typography, space));
CodeSpan.defaultProps = {
  fontFamily: 'monospace',
  fontSize: 'monospace'
};
var Link = styled('a')(compose(color, typography, space));
Link.defaultProps = _objectSpread({}, Text.defaultProps, {
  textDecoration: 'underline',
  color: 'quaternary'
});
var Heading = styled(Text)({});
Heading.defaultProps = {
  color: 'secondary',
  fontFamily: 'header',
  fontSize: 'h1',
  fontWeight: 'bold',
  textAlign: 'center',
  margin: 'headerMargin'
};
var Quote = styled(Text)(_templateObject(), function (_ref) {
  var theme = _ref.theme,
      borderColor = _ref.borderColor;
  return borderColor || theme.colors.secondary;
});
Quote.defaultProps = {
  color: 'primary',
  fontFamily: 'text',
  fontSize: 'text',
  textAlign: 'left',
  fontStyle: 'italic',
  padding: '16px 0 16px 8px',
  margin: 'textMargin'
};
var OrderedList = styled('ol')(compose(color, typography, space));
OrderedList.defaultProps = {
  color: 'primary',
  fontFamily: 'text',
  fontSize: 'text',
  textAlign: 'left',
  margin: 'listMargin'
};
var UnorderedList = styled('ul')(compose(color, typography, space));
UnorderedList.defaultProps = {
  color: 'primary',
  fontFamily: 'text',
  fontSize: 'text',
  textAlign: 'left',
  margin: 'listMargin'
};
var ListItem = styled('li')(compose(color, typography, space));
ListItem.defaultProps = {
  margin: 'listMargin'
};
export { Text, Heading, Quote, OrderedList, UnorderedList, ListItem, Link, CodeSpan };