function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  pointer-events: none;\n  z-index: -1;\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n  ", ";\n  ", ";\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  ", ";\n  width: ", "px;\n  height: ", "px;\n  overflow: hidden;\n  @media print {\n    page-break-before: always;\n    height: 100vh;\n    width: 100vw;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React from 'react';
import PropTypes from 'prop-types';
import useSlide, { SlideContext } from '../hooks/use-slide';
import styled, { ThemeContext } from 'styled-components';
import { color, space } from 'styled-system';
import useAutofillHeight from '../hooks/use-autofill-height';
import { DeckContext } from '../hooks/use-deck';
var SlideContainer = styled('div')(_templateObject(), color, function (_ref) {
  var theme = _ref.theme;
  return theme.size.width || 1366;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.size.height || 768;
});
var SlideWrapper = styled('div')(_templateObject2(), color, space);
var TemplateWrapper = styled('div')(_templateObject3());
/**
 * Slide component wraps anything going in a slide and maintains
 * the slides' internal state through useSlide.
 */

var Slide = function Slide(props) {
  var children = props.children,
      slideNum = props.slideNum,
      backgroundColor = props.backgroundColor,
      textColor = props.textColor,
      template = props.template,
      scaleRatio = props.scaleRatio;
  var theme = React.useContext(ThemeContext);

  var _React$useContext = React.useContext(DeckContext),
      state = _React$useContext.state;

  var _React$useState = React.useState(scaleRatio || 1),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      ratio = _React$useState2[0],
      setRatio = _React$useState2[1];

  var _React$useState3 = React.useState({
    x: 0,
    y: 0
  }),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      origin = _React$useState4[0],
      setOrigin = _React$useState4[1];

  var slideRef = React.useRef(null);
  var slideWrapperRef = React.useRef(null);
  var contentRef = React.useRef(null);
  var templateRef = React.useRef(null);
  var slideWidth = theme.size.width || 1366;
  var slideHeight = theme.size.height || 768;
  var transformForWindowSize = React.useCallback(function () {
    var clientWidth = slideRef.current.parentElement.clientWidth;
    var clientHeight = slideRef.current.parentElement.clientHeight;
    var useVerticalRatio = clientWidth / clientHeight > slideWidth / slideHeight;
    var newRatio = useVerticalRatio ? clientHeight / slideHeight : clientWidth / slideWidth;
    setRatio(newRatio);
  }, [slideHeight, slideWidth]);
  React.useEffect(function () {
    var clientWidth = slideRef.current.parentElement.clientWidth;
    var clientHeight = slideRef.current.parentElement.clientHeight;
    var useVerticalRatio = clientWidth / clientHeight > slideWidth / slideHeight;
    var clientRects = slideRef.current.getClientRects();
    setOrigin({
      x: useVerticalRatio ? "".concat((clientWidth - clientRects[0].width) / 2 / (1 - ratio), "px") : 'left',
      y: useVerticalRatio ? 'top' : "".concat((clientHeight - clientRects[0].height) / 2 / (1 - ratio), "px")
    });
  }, [ratio, slideHeight, slideWidth, theme]);
  React.useEffect(function () {
    if (!isNaN(scaleRatio)) {
      return;
    }

    transformForWindowSize();
    window.addEventListener('resize', transformForWindowSize);
    return function () {
      window.removeEventListener('resize', transformForWindowSize);
    };
  }, [transformForWindowSize, scaleRatio]);
  var transforms = React.useMemo(function () {
    return state.exportMode ? {} : {
      transform: "scale(".concat(ratio, ")"),
      transformOrigin: "".concat(origin.x, " ").concat(origin.y)
    };
  }, [state.exportMode, origin, ratio]);
  var value = useSlide(slideNum);
  var numberOfSlides = value.state.numberOfSlides;
  useAutofillHeight({
    slideWrapperRef: slideWrapperRef,
    templateRef: templateRef,
    contentRef: contentRef,
    slideHeight: slideHeight
  });
  return React.createElement(SlideContainer, {
    ref: slideRef,
    backgroundColor: state.printMode ? '#ffffff' : backgroundColor,
    style: transforms
  }, React.createElement(TemplateWrapper, {
    ref: templateRef
  }, typeof template === 'function' && template({
    slideNumber: slideNum,
    numberOfSlides: numberOfSlides
  })), React.createElement(SlideWrapper, {
    ref: slideWrapperRef,
    padding: "slidePadding",
    color: textColor
  }, React.createElement(SlideContext.Provider, {
    value: value
  }, React.createElement("div", {
    ref: contentRef
  }, children))));
};

Slide.propTypes = {
  backgroundColor: PropTypes.string,
  children: PropTypes.node.isRequired,
  scaleRatio: PropTypes.number,
  slideNum: PropTypes.number,
  template: PropTypes.func,
  textColor: PropTypes.string
};
Slide.defaultProps = {
  textColor: 'primary',
  backgroundColor: 'tertiary'
};
export default Slide;