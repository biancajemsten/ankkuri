function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import * as React from 'react';
import PropTypes from 'prop-types';
import { pipe, subscribe, makeSubject } from 'wonka';
var TransitionPipeContext = React.createContext({});

function TransitionPipeProvider(props) {
  var runTransition = React.useMemo(function () {
    var _makeSubject = makeSubject(),
        _makeSubject2 = _slicedToArray(_makeSubject, 2),
        transitionSource = _makeSubject2[0],
        nextTransition = _makeSubject2[1];

    pipe(transitionSource, subscribe(function (transition) {
      return transition.start();
    }));
    return nextTransition;
  }, []);
  return React.createElement(TransitionPipeContext.Provider, {
    value: {
      runTransition: runTransition
    }
  }, props.children);
}

TransitionPipeProvider.propTypes = {
  children: PropTypes.node
};
export { TransitionPipeContext, TransitionPipeProvider };