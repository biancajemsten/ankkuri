"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useAutofillHeight;

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var getNodeFullHeight = function getNodeFullHeight(node) {
  var style = getComputedStyle(node);
  var nextSiblingMarginTop = 0;

  if (node.nextSibling) {
    nextSiblingMarginTop = parseFloat(getComputedStyle(node.nextSibling).marginTop);
  }

  return node.offsetHeight + parseFloat(style.marginTop) - nextSiblingMarginTop + parseFloat(style.marginBottom);
};

function useAutofillHeight(_ref) {
  var slideWrapperRef = _ref.slideWrapperRef,
      contentRef = _ref.contentRef,
      templateRef = _ref.templateRef,
      slideHeight = _ref.slideHeight;
  React.useLayoutEffect(function () {
    if (!contentRef.current.hasChildNodes()) {
      return;
    }

    var childNodes = [].slice.call(contentRef.current.childNodes);
    var metrics = childNodes.reduce(function (memo, current) {
      var currentNodeIsAutoFill = current.classList.contains('spectacle-auto-height-fill');
      var nodeHeight = currentNodeIsAutoFill ? 0 : getNodeFullHeight(current);
      return {
        totalHeight: nodeHeight + memo.totalHeight,
        numberAutoFills: currentNodeIsAutoFill ? memo.numberAutoFills + 1 : memo.numberAutoFills
      };
    }, {
      totalHeight: 0,
      autoFillsHeight: 0,
      numberAutoFills: 0
    });

    if (templateRef.current.hasChildNodes()) {
      var templateChildNodes = [].slice.call(templateRef.current.childNodes);
      metrics.templateHeight = templateChildNodes.reduce(function (memo, current) {
        var nodeHeight = getNodeFullHeight(current);
        return memo + nodeHeight;
      }, 0);
    } else {
      metrics.templateHeight = 0;
    }

    var slideWrapperStyle = getComputedStyle(slideWrapperRef.current);
    var totalSlideSpace = slideHeight - (parseFloat(slideWrapperStyle.paddingTop) + parseFloat(slideWrapperStyle.paddingBottom));
    var emptySpace = totalSlideSpace - (metrics.totalHeight + metrics.templateHeight);
    childNodes.forEach(function (node) {
      var currentNodeIsAutoFill = node.classList.contains('spectacle-auto-height-fill');

      if (!currentNodeIsAutoFill) {
        return;
      }

      node.style.maxHeight = "".concat(emptySpace / metrics.numberAutoFills, "px");
    });
  }, [slideWrapperRef, contentRef, templateRef, slideHeight]);
}